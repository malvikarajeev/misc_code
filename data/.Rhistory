binary <- read.csv("~/Desktop/stat215/stat-215-a/lab2/data/binary.csv")
binary <- binary[,-1] ##serial numbers
create_names <- function(x) {
return(lapply(x$number_choices, function(x) {seq(1:x)}))
}
names_col <- create_names(struc)
names_ans <- unlist(sapply(1:67, function(x) {paste(struc$ques.num[[x]], names_col[[x]], sep = "_")}))
names(binary) <- names_ans
rm(list=ls())
library(maps)
library(ggplot2)
library(dplyr)
library(data.table)
library(tidyverse)
setwd("~/Desktop/stat215/STAT-215A-Fall-2019/lab2/")
# load the data
ling_data <- read.table('data/lingData.txt', header = T)
ling_location <- read.table('data/lingLocation.txt', header = T)
# question_data contains three objects: quest.mat, quest.use, all.ans
load("data/question_data.RData")
answers <- all.ans[50:122]
##what if i clean the ling_data?
library(zipcode)
data("zipcode")
###changing ZIPs to add a zero
zip <- ling_data$ZIP
zip <- as.character(zip)
for(i in 1:length(zip)) {
if(as.numeric(zip[i]) < 10000){
zip[i] <- paste0("0", zip[i])
}
}
ling_data$ZIP <- zip
t2 <- merge(ling_data,zipcode, by.x = 'ZIP', by.y = 'zip')
t2 <- t2[, -c(2:4, 72, 73)]
names(t2)[69:72] <- c("CITY", "STATE", "lat", "long")
ling_data <- t2
##putclean
na <- function(col){
return(sum(is.na(col)))
}
##putclean
h <- function(x) {
head(x)
}
##i want to make a dataset that has: question number, and number of choices.
l <- length(all.ans)
structure <- matrix(numeric(l*2), l,2)
for (i in 1:l){
temp <- all.ans[[i]]
structure[i,1] <- temp$qnum[1]
structure[i,2] <- length(temp$ans.let)
}
structure <- as.data.frame(structure)
names(structure) <- c('ques.num', 'number_choices')
struc <- structure[50:122,]
struc <- struc[-c(63:65,67,73),]
struc <- struc[-59,]
binary <- read.csv("~/Desktop/stat215/stat-215-a/lab2/data/binary.csv")
binary <- binary[,-1] ##serial numbers
create_names <- function(x) {
return(lapply(x$number_choices, function(x) {seq(1:x)}))
}
names_col <- create_names(struc)
names_ans <- unlist(sapply(1:67, function(x) {paste(struc$ques.num[[x]], names_col[[x]], sep = "_")}))
names(binary) <- names_ans
binary$lat <- ling_data$lat
binary$long <- ling_data$long
binary$id <- ling_data$ID
binary$city <- ling_data$CITY
binary$state <- ling_data$STATE
binary$zip <- substr(as.character(ling_data$ZIP),1,nchar(ling_data$ZIP) - 2)
hmm <- binary[rowSums(binary[,1:468]) == 67,]
binary <- hmm
temp <- binary[, -(469:472)]
by_zip <- temp %>% group_by(zip) %>% summarise_all(sum)
##putclean
get_mode <- function(x) {
#return(names(sort(table(x, use.NA = 'always'), decreasing = T, na.last = T)[1]))
#return(which.max(tabulate(x)))
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
ling_data$newZIP <- substr(as.character(ling_data$ZIP), 1, nchar(ling_data$ZIP) - 2)
temp <- ling_data %>% group_by(newZIP) %>% summarise(state = get_mode(STATE), city = get_mode(CITY),
lat = get_mode(as.numeric(lat)), long = get_mode(as.numeric(long)))
by_zip_ll <- merge(by_zip, temp[,c("lat","long", "newZIP","state","city")],
by.x = 'zip', by.y = 'newZIP', all.x = T)
##adding state info using data(states)
by_zip_ll$state <- as.character(by_zip_ll$state)
data(state)
state_info <- data.frame(stringsAsFactors = F, state.abb,
state.region)
by_zip_ll <- merge(by_zip_ll, state_info, by.x = "state", by.y = "state.abb")
by_zip_ll <- by_zip_ll %>% filter(!(state == 'AK' | state == 'HI'))
write.csv(by_zip_ll, "~/Desktop/stat215/stat-215-a/lab2/data/just_zip.csv")
temp <- by_zip_ll[,-c(1,2, 471:747)]
temp <- t(apply(temp, 1, function(i) i/sum(i))) ##transpose because R populates by column
##sanity check
rowSums(temp)
by_zip_ll[,-c(1,2, 471:747)] <- temp
setwd("~/Desktop/stat215/stat-215-a/lab2/data/")
clusts <- data.frame()
for (i in 2:5) {
clusts[,i-1]<- read.csv(paste(i,"_clusters_justzip.csv", sep =""))
}
clusts <- data.frame(numeri(861))
clusts <- data.frame(numeric(861))
for (i in 2:5) {
clusts[,i-1]<- read.csv(paste(i,"_clusters_justzip.csv", sep =""))
}
head(clusts)
names(clusts) <- c("c2", "c3", "c4", "c5")
nrow(clusts)
nrow(just_zip)
nrow(by_zip_ll)
?read.csv
clusts <- data.frame(numeric(861))
for (i in 2:5) {
clusts[,i-1]<- read.csv(paste(i,"_clusters_justzip.csv", sep =""), header = FALSE)
}
clusts <- data.frame(numeric(862))
for (i in 2:5) {
clusts[,i-1]<- read.csv(paste(i,"_clusters_justzip.csv", sep =""), header = FALSE)
}
names(clusts) <- c("c2", "c3", "c4", "c5")
ggplot(by_zip_ll, aes(x = long, y = lat)) + geom_point(aes(col = clusts$c2))
ggplot(by_zip_ll, aes(x = long, y = lat)) + geom_point(aes(col = as.factor(clusts$c2))
)
ggplot(by_zip_ll, aes(x = long, y = lat)) + geom_point(aes(col = as.factor(clusts$c3))
)
table(clusts$c3)
table(clusts$c4)
ggplot(by_zip_ll, aes(x = long, y = lat)) + geom_point(aes(col = as.factor(clusts$c4)))
ggplot(by_zip_ll, aes(x = long, y = lat)) + geom_point(aes(col = as.factor(clusts$c5)))
ggplot(by_zip_ll, aes(x = long, y = lat)) + geom_point(aes(col = as.factor(clusts$c2)))
#######################################################
#hierarchical bipartite spectral graph partitioning
#######################################################
state_df <- map_data("state")
my_map_theme <- theme_void()
create_heatmap <- function(kk) {
need <- as.matrix(just_zip[,-c(1,2, 471:474)])
#step1: D1 AND D2
rowsums <- 1/sqrt(rowSums(need)) ##for d1
colsums <- 1/sqrt(colSums(need)) ##for d2
d1 <- diag(rowsums)
d2 <- diag(colsums)
#step2:find A_n
A_n <- (d1 %*% need) %*% d2
#step3: SVD of A_n
svd_mat <- svd(A_n)
#step4: calculate Z
k <- kk
l <- ceiling(log(k))
u <- svd_mat$u
v <- svd_mat$v
Z1 <- d1 %*% as.matrix(u[,2:l+1])
Z2 <- d2 %*% v[,2:l+1]
Z <- rbind(Z1,Z2)
#step4: kmeans
k_means <- kmeans(Z, centers = k, iter.max = 100)
clusters <- k_means$cluster
temp <- by_zip_ll
temp$cluster_ques <- k_means$cluster[1:862]
heatmap.2(need, Rowv = clusters[1:862], Colv = clusters[863:1330], dendrogram = 'none', trace = 'none',main = paste("Bicluster with k =",kk)
,xlab = "ZIP Code", ylab = "Reponse Vector", labRow = F, labCol = F)
ggplot(temp) +
geom_point(aes(x = long, y = lat, color = as.factor(cluster_ques)),
size = 3, alpha = 0.5) +
scale_color_brewer(palette="Dark2") +
geom_polygon(aes(x = long, y = lat, group = group),
data = state_df, colour = "black", fill = NA) +
my_map_theme
}
nrow(binary)
temp <- binary[, -(469:472)]
by_zip <- temp %>% group_by(zip) %>% summarise_all(sum)
##putclean
get_mode <- function(x) {
#return(names(sort(table(x, use.NA = 'always'), decreasing = T, na.last = T)[1]))
#return(which.max(tabulate(x)))
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
ling_data$newZIP <- substr(as.character(ling_data$ZIP), 1, nchar(ling_data$ZIP) - 2)
temp <- ling_data %>% group_by(newZIP) %>% summarise(state = get_mode(STATE), city = get_mode(CITY),
lat = get_mode(as.numeric(lat)), long = get_mode(as.numeric(long)))
just_zip <- merge(by_zip, temp[,c("lat","long", "newZIP","state","city")],
by.x = 'zip', by.y = 'newZIP', all.x = T)
##adding state info using data(states)
just_zip$state <- as.character(by_zip_ll$state)
just_zip <- merge(just_zip, state_info, by.x = "state", by.y = "state.abb")
just_zip <- just_zip %>% filter(!(state == 'AK' | state == 'HI'))
#######################################################
#hierarchical bipartite spectral graph partitioning
#######################################################
state_df <- map_data("state")
my_map_theme <- theme_void()
create_heatmap <- function(kk) {
need <- as.matrix(just_zip[,-c(1,2, 471:474)])
#step1: D1 AND D2
rowsums <- 1/sqrt(rowSums(need)) ##for d1
colsums <- 1/sqrt(colSums(need)) ##for d2
d1 <- diag(rowsums)
d2 <- diag(colsums)
#step2:find A_n
A_n <- (d1 %*% need) %*% d2
#step3: SVD of A_n
svd_mat <- svd(A_n)
#step4: calculate Z
k <- kk
l <- ceiling(log(k))
u <- svd_mat$u
v <- svd_mat$v
Z1 <- d1 %*% as.matrix(u[,2:l+1])
Z2 <- d2 %*% v[,2:l+1]
Z <- rbind(Z1,Z2)
#step4: kmeans
k_means <- kmeans(Z, centers = k, iter.max = 100)
clusters <- k_means$cluster
temp <- by_zip_ll
temp$cluster_ques <- k_means$cluster[1:862]
heatmap.2(need, Rowv = clusters[1:862], Colv = clusters[863:1330], dendrogram = 'none', trace = 'none',main = paste("Bicluster with k =",kk)
,xlab = "ZIP Code", ylab = "Reponse Vector", labRow = F, labCol = F)
ggplot(temp) +
geom_point(aes(x = long, y = lat, color = as.factor(cluster_ques)),
size = 3, alpha = 0.5) +
scale_color_brewer(palette="Dark2") +
geom_polygon(aes(x = long, y = lat, group = group),
data = state_df, colour = "black", fill = NA) +
my_map_theme
}
create_heatmap(4)
library(heatmap.2)
state_df <- map_data("state")
my_map_theme <- theme_void()
create_heatmap <- function(kk) {
need <- as.matrix(just_zip[,-c(1,2, 471:474)])
#step1: D1 AND D2
rowsums <- 1/sqrt(rowSums(need)) ##for d1
colsums <- 1/sqrt(colSums(need)) ##for d2
d1 <- diag(rowsums)
d2 <- diag(colsums)
#step2:find A_n
A_n <- (d1 %*% need) %*% d2
#step3: SVD of A_n
svd_mat <- svd(A_n)
#step4: calculate Z
k <- kk
l <- ceiling(log(k))
u <- svd_mat$u
v <- svd_mat$v
Z1 <- d1 %*% as.matrix(u[,2:l+1])
Z2 <- d2 %*% v[,2:l+1]
Z <- rbind(Z1,Z2)
#step4: kmeans
k_means <- kmeans(Z, centers = k, iter.max = 100)
clusters <- k_means$cluster
temp <- by_zip_ll
temp$cluster_ques <- k_means$cluster[1:862]
heatmap.2(need, Rowv = clusters[1:862], Colv = clusters[863:1330], dendrogram = 'none', trace = 'none',main = paste("Bicluster with k =",kk)
,xlab = "ZIP Code", ylab = "Reponse Vector", labRow = F, labCol = F)
ggplot(temp) +
geom_point(aes(x = long, y = lat, color = as.factor(cluster_ques)),
size = 3, alpha = 0.5) +
scale_color_brewer(palette="Dark2") +
geom_polygon(aes(x = long, y = lat, group = group),
data = state_df, colour = "black", fill = NA) +
my_map_theme
}
create_heatmap(4)
library(qplot)
library(gplot)
state_df <- map_data("state")
my_map_theme <- theme_void()
create_heatmap <- function(kk) {
need <- as.matrix(just_zip[,-c(1,2, 471:474)])
#step1: D1 AND D2
rowsums <- 1/sqrt(rowSums(need)) ##for d1
colsums <- 1/sqrt(colSums(need)) ##for d2
d1 <- diag(rowsums)
d2 <- diag(colsums)
#step2:find A_n
A_n <- (d1 %*% need) %*% d2
#step3: SVD of A_n
svd_mat <- svd(A_n)
#step4: calculate Z
k <- kk
l <- ceiling(log(k))
u <- svd_mat$u
v <- svd_mat$v
Z1 <- d1 %*% as.matrix(u[,2:l+1])
Z2 <- d2 %*% v[,2:l+1]
Z <- rbind(Z1,Z2)
#step4: kmeans
k_means <- kmeans(Z, centers = k, iter.max = 100)
clusters <- k_means$cluster
temp <- by_zip_ll
temp$cluster_ques <- k_means$cluster[1:862]
heatmap.2(need, Rowv = clusters[1:862], Colv = clusters[863:1330], dendrogram = 'none', trace = 'none',main = paste("Bicluster with k =",kk)
,xlab = "ZIP Code", ylab = "Reponse Vector", labRow = F, labCol = F)
ggplot(temp) +
geom_point(aes(x = long, y = lat, color = as.factor(cluster_ques)),
size = 3, alpha = 0.5) +
scale_color_brewer(palette="Dark2") +
geom_polygon(aes(x = long, y = lat, group = group),
data = state_df, colour = "black", fill = NA) +
my_map_theme
}
create_heatmap(4)
library(gplot)
library(kableExtra)
library(dbscan)
library(factoextra)
library(fastcluster)
library(FactoMineR)
library(NbClust)
library(tidyverse)
library(magrittr)
library(cluster)
library(cluster.datasets)
library(cowplot)
library(NbClust)
library(clValid)
library(ggfortify)
library(clustree)
library(dendextend)
library(factoextra)
library(FactoMineR)
library(corrplot)
library(GGally)
library(knitr)
library(kableExtra)
library(gplots)
create_heatmap <- function(kk) {
need <- as.matrix(just_zip[,-c(1,2, 471:474)])
#step1: D1 AND D2
rowsums <- 1/sqrt(rowSums(need)) ##for d1
colsums <- 1/sqrt(colSums(need)) ##for d2
d1 <- diag(rowsums)
d2 <- diag(colsums)
#step2:find A_n
A_n <- (d1 %*% need) %*% d2
#step3: SVD of A_n
svd_mat <- svd(A_n)
#step4: calculate Z
k <- kk
l <- ceiling(log(k))
u <- svd_mat$u
v <- svd_mat$v
Z1 <- d1 %*% as.matrix(u[,2:l+1])
Z2 <- d2 %*% v[,2:l+1]
Z <- rbind(Z1,Z2)
#step4: kmeans
k_means <- kmeans(Z, centers = k, iter.max = 100)
clusters <- k_means$cluster
temp <- by_zip_ll
temp$cluster_ques <- k_means$cluster[1:862]
heatmap.2(need, Rowv = clusters[1:862], Colv = clusters[863:1330], dendrogram = 'none', trace = 'none',main = paste("Bicluster with k =",kk)
,xlab = "ZIP Code", ylab = "Reponse Vector", labRow = F, labCol = F)
ggplot(temp) +
geom_point(aes(x = long, y = lat, color = as.factor(cluster_ques)),
size = 3, alpha = 0.5) +
scale_color_brewer(palette="Dark2") +
geom_polygon(aes(x = long, y = lat, group = group),
data = state_df, colour = "black", fill = NA) +
my_map_theme
}
create_heatmap(4)
c(1,2,3) * c(4,5,6)
create_heatmap <- function(kk) {
need <- as.matrix(just_zip[,-c(1,2, 471:474)])
#step1: D1 AND D2
rowsums <- 1/sqrt(rowSums(need)) ##for d1
colsums <- 1/sqrt(colSums(need)) ##for d2
d1 <- diag(rowsums)
d2 <- diag(colsums)
#step2:find A_n
A_n <- outer(d1,d2) * need
#step3: SVD of A_n
svd_mat <- svd(A_n)
#step4: calculate Z
k <- kk
l <- ceiling(log(k))
u <- svd_mat$u
v <- svd_mat$v
Z1 <- rowsums * colSums(as.matrix(u[,2:l+1]))
Z2 <- colsums * colSums(v[,2:l+1])
Z <- rbind(Z1,Z2)
#step4: kmeans
k_means <- kmeans(Z, centers = k, iter.max = 100)
clusters <- k_means$cluster
temp <- by_zip_ll
temp$cluster_ques <- k_means$cluster[1:862]
heatmap.2(need, Rowv = clusters[1:862], Colv = clusters[863:1330], dendrogram = 'none', trace = 'none',main = paste("Bicluster with k =",kk)
,xlab = "ZIP Code", ylab = "Reponse Vector", labRow = F, labCol = F)
ggplot(temp) +
geom_point(aes(x = long, y = lat, color = as.factor(cluster_ques)),
size = 3, alpha = 0.5) +
scale_color_brewer(palette="Dark2") +
geom_polygon(aes(x = long, y = lat, group = group),
data = state_df, colour = "black", fill = NA) +
my_map_theme
}
create_heatmap(4)
create_heatmap(4)
create_heatmap(4)
rm(hmm)
rm(zipcode)
rm(zip)
rm(quest.mat)
rm(quest.use)
rm(state_df)
rm(t2)
create_heatmap <- function(kk) {
need <- as.matrix(just_zip[,-c(1,2, 471:474)])
#step1: D1 AND D2
rowsums <- 1/sqrt(rowSums(need)) ##for d1
colsums <- 1/sqrt(colSums(need)) ##for d2
d1 <- diag(rowsums)
d2 <- diag(colsums)
#step2:find A_n
A_n <- outer(d1,d2) * need
#step3: SVD of A_n
svd_mat <- svd(A_n)
#step4: calculate Z
k <- kk
l <- ceiling(log(k))
u <- svd_mat$u
v <- svd_mat$v
Z1 <- rowsums * colSums(as.matrix(u[,2:l+1]))
Z2 <- colsums * colSums(v[,2:l+1])
Z <- rbind(Z1,Z2)
#step4: kmeans
k_means <- kmeans(Z, centers = k, iter.max = 100)
clusters <- k_means$cluster
temp <- by_zip_ll
temp$cluster_ques <- k_means$cluster[1:862]
heatmap.2(need, Rowv = clusters[1:862], Colv = clusters[863:1330], dendrogram = 'none', trace = 'none',main = paste("Bicluster with k =",kk)
,xlab = "ZIP Code", ylab = "Reponse Vector", labRow = F, labCol = F)
ggplot(temp) +
geom_point(aes(x = long, y = lat, color = as.factor(cluster_ques)),
size = 3, alpha = 0.5) +
scale_color_brewer(palette="Dark2") +
geom_polygon(aes(x = long, y = lat, group = group),
data = state_df, colour = "black", fill = NA) +
my_map_theme
}
create_heatmap(4)
create_heatmap(4)
create_heatmap(4)
create_heatmap(4)
create_heatmap(4)
